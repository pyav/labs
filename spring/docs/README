Notes from Coursera: (Dr. Jules White)
===================

Request body encoding:
---------------------
Request message  --> body ---> url encoded (small amounts, simple key-value pairs)
                          |
                          |--> multi part (Lots of data, files)

Http response anatomy:
---------------------
  Status line:
  -----------
  response   phrase
    code      or
             text

  Header:
  ------
    Content-type
    Body

Http response code:
------------------
       logic ---> 1xx - info
         |   |--> 2xx - success 
         |   |     |-> 200 - OK
         |   |--> 3xx - redirection
         |   |--> 4xx - client error
         |   |     |-> 404 - resource not found
         |   |--> 5xx - server error
         |         |-> 500
         V
       handle
       response
       based
       on 
       code

Cookies:
-------
  Server --> cookies --> response
                         header
                           |
                           V
                         Client stores
                          and 
                         sends to Server

Http polling:
------------
  - Regular http client needs to poll server as http is a client-driven
    protocol. This has some time fixed to it, which can be increased, say after
    T seconds and then after 2T seconds and so on. 
  - The client connection can be upgraded to Websockets in which the server can
    send back the data to client. Problem with Websockets is that if the
    connection is dropped, the client needs to reconnect and upgrade to
    Websocket. This means some kind of logic needs to be with client to
    understand and figure out when the connection went off and reconnect and
    then upgrade to websocket.
  - Another issue with wesockets is that a persistent connection needs to be
    present with a client always. This means that server resources will be in
    use constantly. For an http connection, the server can let go the
    connection if there is no data.

Push messaging:
--------------
  client        server            GCM (Google Cloud Messaging)
    |             |--------------->|
    |<---msg, who subs?, <4Kb------|
    |             |                |
    |--poll------>|                |
    |<------------|                |
        ^
        |
     control data
        +
     security

