Following is the notes from Algorithms-part2 on Coursera by Princeton
University. It was conducted by Prof. Robert Sedgewick and Kevin Wayne.

Link to the course:
------------------
  - https://www.coursera.org/learn/algorithms-part2

Graph Representation:
--------------------
In practice: Use adjacency list representation.
             - Algorithms based on iterating over vertices adjacent to 'v'.
             - Real-world graphs tend to be sparse (huge number of vertices,
               small average vertex degree).

--------------------------------------------------------------------------
Representation | Space | Add Edge | Edge between | Iterate over vertices |
               |       |          | v and w      | adjacent to v?        |
--------------------------------------------------------------------------
List of edges  |   E   |    1     |     E        |      E                |
--------------------------------------------------------------------------
Adjacency      |  V^2  |    1*    |     1        |      V                |
Matrix         |       |          |              |                       |
--------------------------------------------------------------------------
Adjacency      | E + V |    1     |  degree(v)   |      degree(v)        |
List           |       |          |              |                       |
--------------------------------------------------------------------------
                                                * disallows parallel edges

Maze exploration:
----------------
  - Depth First Search - eg, Pacman game.

Depth-first search:
------------------
  - Goal: Systematically search through a graph.
  - Idea: Mimic maze exploration.
  - DFS(to visit a vertex v):
    ---
      - Mark v as visited.
      - Recursively visit all unmarked vertices 
        w adjacent to v.
  - Typical applications:
    --------------------
      - Find all vertices connected to a given source vertex.
      - Find a path between two vertices.

Bread-first search:
------------------
  - Not a recursive algorithm, but uses a queue as an auxiliary data structure.
  - Shortest Path.
  - BFS(from source vertex s):
    ---
      - Put 's' onto a FIFP queue and mark 's' as visited.
      - Repeat until the queue is empty:
          - Remove the least recently added vertex v.
          - Add each of v's unvisited neighbors to the queue and mark them as
            visited.
  - BFS computes shortest paths (fewest number of edges) from 's' to all other
    vertices in a graph in time proportional to E + V.
  - Routing: Fewest number of hops in a communication network.
  - Kavin Bacon Numbers.
  - Erdos numbers.


Connected Components:
--------------------
  - The relation "is connected to" is an equivalence relation.
    - Reflexive: v is connected to v.
    - Symmetric: if v is connected to w, then w is connected to v.
    - Transitive: if v is connected to w and w is connected to x, then v is
                  connected to x.
  - Goal: Partition vertices into connected components.
          - Initialize all vertices v as unmarked.
          - For each unmarked vertex, run DFS to identify all vertices
            discovered as part of the same component.
          - Keep track of connected component number.
          - Connected component groups help process the data in linear time.

Graph Challenges:
----------------
  - Challenge 1: Is a graph bipartite?
  - Challenge 2: Find a cycle.
  - Challenge 3: Euler Tour: Is there a cycle that uses each edge exactly once?
                 => A connected graph is Eulerian iff all the vertices have
                    even degree.
  - Challenge 4: Find a cycle that visits every vertex exactly once.
                   - Sometimes called as Traveling sales person problem in graph.
                 => Hamiltonian cycle problem (Classical NP-complete problem).
                    - Intractable.
  - Challenge 5: Are two graphs identical except for vertex names?
                 => Graph Isomorphism Problem.
                 - No body knows even how to classify this problem.
  - Challenge 6: Layout a graph in a plane without crossing edges?
                 => Linear time DFS based planarity algorithm. Discoverd by
                    Tarjan in 1970s. (too complicated for most practioners).


Directed Graph (or Digraph):
---------------------------
Some diagraph problems:
----------------------
  - Path: Is there a directed path from one point to another in a directed graph?
  - Shorted Path: What is the shorted directed path from s to t?
  - Topological sort: Can you draw a digraph so that all edges point upwards?
  - Strong connectivity: Is there a directed path between all pairs of
                         vertices?
  - Transitive closure: For which vertices v and w is there a path from v to w?
  - PageRank: What is the importance of a web page?

Digraph API:
-----------

Digraph Search:
--------------
  - Use of depth-first search in Digraphs:
      - source code analysis to find dead code.
      - Find and remove unreachable code.
      - Automatic garbage collection.
      - Mark-sweep algorithm [McCarthy, 1960]
          - Mark: mark all reachable objects.
          - Sweep: if object is unmarked, it is garbage (so add to the free list).
      - Memory cost: Uses 1 extra mark bit per object (plus DFS stack).
  - DFS enables direct solution of simple digraph problems.
      - Reachability.
      - Path finding.
      - Topological sort.
      - Directed cycle detection.
  - Basis for solving difficult digraph problems.
      - 2-satisfiability.
      - Directed Euler path.
      - Strongly-connected components.
      - Paper:
        -----
          - DEPTH-FIRST SEARCH AND LINEAR GRAPH ALGORITHMS - Robert Tarjan
  - Proposition:
    -----------
    BFS computes shortest paths (fewest number of edges) from s to
    all other vertices in a digraph in time proportional to E+V.
  - For multi-source shorted paths, user BFS, but initialize by enqueuing all
    source vertices.
  - Example: 
    -------
      - All the pages that you can crawl starting from a given webpage.
          - Make a queue and add the link that the first one points to into
            that queue. 
          - One reason not to use a DFS here is that some websites trap such
            query and keep creating further links and you may fall into the
            trap of going to it's depth and not having related links at once as
            in BFS.

Topological sort:
----------------
  - Run depth-first search.
  - Return vertices in reverse postorder.
  - Proposition:
    -----------
    A digraph has a topological order iff no directed cycle.
    - Goal: Give a directed graph, find a directed cycle.
        - Solution: DFS. 
  - Scheduling:
    ----------
      - Given a set of tasks to be completed with precedence constraints, in
        what order should we schedule the tasks?
      - A directed cycle implies the scheduling problem is infeasible.
  - Directed cycle detection application: cyclic inheritance.
      - class A ineherits B, B inherits C, C inherits A.
  - Cyclic calculation in Ms spreadsheet - ERROR.

Strong-components:
-----------------
  - Strong components algorithms: brief history
    ----------------------------
      - 1960s: Core OR problem.
          - Widely studied; some practical algorithms.
          - complexity not understood.
      - 1972: linear-time DFS algorithm (Tarjan)
          - Classic algorithm
          - Level of difficulty: Algs4++
          - Demonstrated broad applicability and importance of DFS.
      - 1980s: easy two-pass linear-time algorithm (Kosaraju-Sharir).
          - forgot notes for lecture; developed algorithm in order to teach it!
          - LAter found in Russian scientific literature (1972).
      - 1990s: more easy linear-time algorithms.
          - Gabow: fixed old OR algorithm.
          - Cheriyan-Mehlhorn: needed one-pass algorithm for LEDA.

  - Kosaraju-Sharir algorithm:
    -------------------------
      - simple bug mysterious algorithm for computing strong components.
          - Phase 1: run DFS on G^R to compute reverse postorder.
          - Phase 2: run DFS on G, considering vertices in order given by first DFS.
      - computes the strong components of a digraph in time proportional to
        E+V.
      - Running time: bottleneck is running DFS twice and computing G^R.

Digraph-processing summary: algorithms of the day
--------------------------
  - single-source reachability - DFS
  - topologival sort in a DAG - DFS
  - strong component in a digraph - Kosaraju DFS (twice)

Minimum Spanning Tree:
---------------------
  - Greedy Algorithm:
    ----------------
      - Start with all edges colored grey.
      - Find cut with no black crossing edges; color its min-weight edge black.
      - Repeat until V-1 edges are colored black.
  - The Greedy algorithm computes the MST.
  - Efficient implementations:
      - Kruskal's algorithm
      - Prim's algorithm
      - Boruvka's algorithm
  - What happen's if edge weights are not all distinct?
    => Greedy MST algorithm still correct if equal weights are present!
  - What if Graph is not connected?
    => Compute minimum spanning forest = MST of each component.

Edge-weighted graph API:
-----------------------
  - Edge abstraction needed for weighted edge:
    -----------------------------------------
      - public class Edge implements Comparable<Edge>
        ---------------------------------------------
          - Edge(int v, int w, double weight)  - create a weighted edge v-w
          - int either()  - either endpoint
          - int other(int v)  - the endpoint that's not v
          - int compareTo(Edge that)  - compare this edge to that edge
          - double weight()  - the weight
          - String toString()  - string representation
      - Idiom for processing an edge e: int v = e.either(), w = e.other(v);

  - public class EdgeWeightedGraph:
    ------------------------------
      - EdgeWeightedGraph(int V)    - create and empty graph with V vertices
      - EdgeWeightedGraph(In in)    - create a graph from input stream
      - void addEdge(Edge e)        - add weighted edge e to this graph
      - Iterable<Edge> adj(int v)   - edges incident to v
      - Iterable<Edge> edges()      - all edges in this graph
      - int V()                     - number of vertices
      - int E()                     - number of edges
      - String toString()           - string representation

    - allow self-loops and parallel edges.

Kruskal's algorithm:
-------------------
  - Consider edges in ascending order of weight.
  - Add next edge to the tree T unless doing so would create a cycle.
  - Kruskal's algorithm builds the MST one edge at a time.
  - It finds an edge that connects two trees in a forest of growing trees.
  - Kruskal’s algorithm uses space proportional to E and time proportional to E
    log E (in the worst case) to compute the MST of an edge- weighted connected
    graph with E edges and V vertices.

Prim's Algorithm:
----------------
  - Start with one vertex and greedily grow the tree.
  - add minimum weighted edge with exactly one endpoint in the tree.
  - Repeat until V-1 edges.
  - Adds the shortest edge that connects a non-tree vertex to the tree vertex.
  - How to find exactly one endpoint in the tree?
      - Lazy implementation: priority queue of weights of the edges that have
        at least one endpoint in the tree.

Prim's algorithm (eager):
------------------------
  - Start with vertex 0 and greedily grow tree T.
  - Add to T the min weight edge with exactly one endpoint in T.
  - Repeat until V-1 edges.
  
Note: In eager implementation, the priority queue gets updated
      with the new weight of the edge if a shorter weight edge
      to reach to add a vertex to the tree is found and
      previous on is removed.

Dijkstra's algorithm: (shortest path)
--------------------
  - Find shortest paths in graphs with non-negative edge weights.
  - Consider vertices in increasing order of distance from s (non-tree vertex with the lowest distTo[] value).
  - Add vertex to tree and relax all edges pointing from that vertex.
